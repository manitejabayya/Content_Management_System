
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @db.ObjectId @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  username      String?   @unique @default(nanoid())
  image         String?
  accounts      Account[]
  sessions      Session[]
  Posts         Post[]
  createdAt     DateTime @default(now())
}
 
model VerificationRequest{
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String   @unique
  content     String?
  thumbnail    String?
  desc        String?
  keywords   String?
  excerpt     String?
  catSlug     String?
  category   Category? @relation("CategoryPosts", fields: [catSlug], references: [slug], onDelete: Cascade)
  createdAt   DateTime @default(now())
  authorId    String   @db.ObjectId @map("author_id")
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  status      PostStatus   @default(DRAFT)
 
}
model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  slug        String   @unique
  posts       Post[]   @relation("CategoryPosts")
}

enum PostStatus {
  DRAFT
  PUBLISHED
  DELETED
  ARCHIVED
}